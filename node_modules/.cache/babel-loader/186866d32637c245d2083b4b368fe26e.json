{"ast":null,"code":"var _jsxFileName = \"/home/ishav/Documents/Altcampus/projects/Quizapp-project/src/components/Showmarks.js\";\nimport React from \"react\";\n\nclass Showmarks extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      totalmarks: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api/v1/user\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.quizuserToken\n      }\n    }).then(res => res.json()).then(data => {\n      console.log(data);\n\n      if (data.success) {\n        this.setState({\n          totalmarks: data.user.marksId.reverse()\n        });\n      }\n\n      console.log(this.state.totalmarks);\n    });\n  }\n\n  render() {\n    let totalmarks = this.state.totalmarks;\n    console.log(totalmarks);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"showmarks-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, totalmarks.length ? React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      className: \"showmarks-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Showing all test marks\"), React.createElement(\"table\", {\n      className: \"showmarks-table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      className: \"showmarks-table-th\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"So.No\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Quizset Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"Marks secured\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Appeared on\")), totalmarks && totalmarks.map((marks, index) => React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      className: \"showmarks-table-td\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, index + 1), React.createElement(\"td\", {\n      className: \"showmarks-table-td\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, marks.quizsetName), React.createElement(\"td\", {\n      className: \"showmarks-table-td\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, marks.mark), React.createElement(\"td\", {\n      className: \"showmarks-table-td\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \" \", new Intl.DateTimeFormat(\"en-GB\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      year: \"numeric\"\n    }).format(new Date(marks.createdAt))))))) : React.createElement(\"p\", {\n      className: \"showmarks-heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"No quiz test appeared\")));\n  }\n\n}\n\nexport default Showmarks;","map":{"version":3,"sources":["/home/ishav/Documents/Altcampus/projects/Quizapp-project/src/components/Showmarks.js"],"names":["React","Showmarks","Component","constructor","state","totalmarks","componentDidMount","fetch","method","headers","Authorization","localStorage","quizuserToken","then","res","json","data","console","log","success","setState","user","marksId","reverse","render","length","map","marks","index","quizsetName","mark","Intl","DateTimeFormat","hour","minute","month","day","year","format","Date","createdAt"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nclass Showmarks extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      totalmarks: \"\"\n    };\n  }\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api/v1/user\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.quizuserToken\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        if (data.success) {\n          this.setState({ totalmarks: data.user.marksId.reverse() });\n        }\n        console.log(this.state.totalmarks);\n      });\n  }\n  render() {\n    let { totalmarks } = this.state;\n    console.log(totalmarks);\n    return (\n      <>\n        <div className=\"showmarks-section\">\n          {totalmarks.length ? (\n            <>\n              <p className=\"showmarks-heading\">Showing all test marks</p>\n              <table className=\"showmarks-table\">\n                <tr className=\"showmarks-table-th\">\n                  <th>So.No</th>\n                  <th>Quizset Name</th>\n                  <th>Marks secured</th>\n                  <th>Appeared on</th>\n                </tr>\n                {totalmarks &&\n                  totalmarks.map((marks, index) => (\n                    <tr>\n                      <td className=\"showmarks-table-td\">{index + 1}</td>\n                      <td className=\"showmarks-table-td\">\n                        {marks.quizsetName}\n                      </td>\n                      <td className=\"showmarks-table-td\">{marks.mark}</td>\n\n                      <td className=\"showmarks-table-td\">\n                        {\" \"}\n                        {new Intl.DateTimeFormat(\"en-GB\", {\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                          month: \"2-digit\",\n                          day: \"2-digit\",\n                          year: \"numeric\"\n                        }).format(new Date(marks.createdAt))}\n                      </td>\n                    </tr>\n                  ))}\n              </table>\n            </>\n          ) : (\n            <p className=\"showmarks-heading\">No quiz test appeared</p>\n          )}\n        </div>\n      </>\n    );\n  }\n}\nexport default Showmarks;\n"]},"metadata":{},"sourceType":"module"}